---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubecost-cost-analyzer
  namespace: kubecost
  labels:
    app.kubernetes.io/name: cost-analyzer
    helm.sh/chart: cost-analyzer-2.0.1
    app.kubernetes.io/instance: kubecost
    app.kubernetes.io/managed-by: Helm
    app: cost-analyzer
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: cost-analyzer
        app.kubernetes.io/instance: kubecost
        app: cost-analyzer
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cost-analyzer
        app.kubernetes.io/instance: kubecost
        app: cost-analyzer
    spec:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Always
      serviceAccountName: kubecost-cost-analyzer
      volumes:
        - name: tmp
          emptyDir: {}
        - name: federated-storage-config
          secret:
           defaultMode: 420
           secretName: kubecost-object-store
        - name: productkey-secret
          secret:
            secretName: kubecost-product-key
            items:
            - key: productkey.json
              path: productkey.json
        - name: persistent-configs
          persistentVolumeClaim:
            claimName: kubecost-cost-analyzer
      containers:
        - image: gcr.io/kubecost1/cost-model:prod-2.0.1
          name: cost-model
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          imagePullPolicy: Always
          ports:
          - name: tcp-model
            containerPort: 9003
            protocol: TCP
          - name: tcp-frontend
            containerPort: 9090
            protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 55Mi
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9003
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 200
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9003
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 200
          volumeMounts:
            - name: persistent-configs
              mountPath: /var/configs
            - name: federated-storage-config
              mountPath: /var/configs/etl/federated
              readOnly: true
            - name: productkey-secret
              mountPath: /var/configs/productkey
          env:
            - name: GRAFANA_ENABLED
              value: "false"
            - name: HELM_VALUES
              value: 
            - name: READ_ONLY
              value: "false"
            - name: PROMETHEUS_SERVER_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: kubecost-cost-analyzer
                  key: prometheus-server-endpoint
            - name: CLOUD_COST_ENABLED
              value: "false"
            - name: CLOUD_PROVIDER_API_KEY
              value: "AIzaSyDXQPG_MHUEy9neR7stolq6l0ujXmjJlvk" # The GCP Pricing API key.This GCP api key is expected to be here and is limited to accessing google's billing API.
            - name: CONFIG_PATH
              value: /var/configs/
            - name: DB_PATH
              value: /var/db/
            - name: CLUSTER_PROFILE
              value: production
            - name: EMIT_POD_ANNOTATIONS_METRIC
              value: "false"
            - name: EMIT_NAMESPACE_ANNOTATIONS_METRIC
              value: "false"
            - name: EMIT_KSM_V1_METRICS
              value: "true"
            - name: EMIT_KSM_V1_METRICS_ONLY # ONLY emit KSM v1 metrics that do not exist in KSM 2 by default
              value: "false"
            - name: LOG_COLLECTION_ENABLED
              value: "true"
            - name: PRODUCT_ANALYTICS_ENABLED
              value: "true"
            - name: ERROR_REPORTING_ENABLED
              value: "true"
            - name: VALUES_REPORTING_ENABLED
              value: "true"
            - name: SENTRY_DSN
              value: "https://71964476292e4087af8d5072afe43abd@o394722.ingest.sentry.io/5245431"
            - name: LEGACY_EXTERNAL_API_DISABLED
              value: "false"
            - name: OUT_OF_CLUSTER_PROM_METRICS_ENABLED
              value: "false"
            - name: CACHE_WARMING_ENABLED
              value: "false"
            - name: SAVINGS_ENABLED
              value: "false"
            - name: ETL_ENABLED
              value: "true"
            - name: FEDERATED_STORE_CONFIG
              value: "/var/configs/etl/federated/federated-store.yaml"
            - name: FEDERATED_CLUSTER
              value: "true"
            - name: ETL_STORE_READ_ONLY
              value: "false"
            - name : ETL_CLOUD_USAGE_ENABLED
              value: "false"
            - name: CLOUD_ASSETS_EXCLUDE_PROVIDER_ID
              value: "false"
            - name: ETL_RESOLUTION_SECONDS
              value: "300"
            - name: ETL_MAX_PROMETHEUS_QUERY_DURATION_MINUTES
              value: "1440"
            - name: ETL_DAILY_STORE_DURATION_DAYS
              value: "91"
            - name: ETL_HOURLY_STORE_DURATION_HOURS
              value: "49"
            - name: ETL_WEEKLY_STORE_DURATION_WEEKS
              value: "53"
            - name: ETL_FILE_STORE_ENABLED
              value: "true"
            - name: ETL_ASSET_RECONCILIATION_ENABLED
              value: "true"
            - name: ETL_USE_UNBLENDED_COST
              value: "false"
            - name: CONTAINER_STATS_ENABLED
              value: "true"
            - name: RECONCILE_NETWORK
              value: "true"
            - name: KUBECOST_METRICS_POD_ENABLED
              value: "false"
            - name: PV_ENABLED
              value: "true"
            - name: MAX_QUERY_CONCURRENCY
              value: "5"
            - name: UTC_OFFSET
              value: "+00:00"
            - name: CLUSTER_ID
              value: k8s-infra-prow-build
            - name: COST_EVENTS_AUDIT_ENABLED
              value: "false"
            - name: RELEASE_NAME
              value: kubecost
            - name: KUBECOST_NAMESPACE
              value: kubecost
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: KUBECOST_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: kubecost-cost-analyzer
                  key: kubecost-token
            - name: WATERFOWL_ENABLED
              value: "true"
        - name: aggregator
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: gcr.io/kubecost1/cost-model:prod-2.0.1
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9004
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 200
          imagePullPolicy: Always
          args: ["waterfowl"]
          ports:
            - name: tcp-api
              containerPort: 9004
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - name: persistent-configs
              mountPath: /var/configs
            - name: federated-storage-config
              mountPath: /var/configs/etl
              readOnly: true
          env:
            - name: CLUSTER_ID
              value: k8s-infra-prow-build
            - name: CONFIG_PATH
              value: /var/configs/
            - name: ETL_ENABLED
              value: "false" # this container should never run KC's concept of "ETL"
            - name: CLOUD_PROVIDER_API_KEY
              value: "AIzaSyDXQPG_MHUEy9neR7stolq6l0ujXmjJlvk" # The GCP Pricing API key.This GCP api key is expected to be here and is limited to accessing google's billing API.'
            - name: "DB_CONCURRENT_INGESTION_COUNT"
              value: "3"
            - name: "DB_READ_THREADS"
              value: "1"
            - name: "DB_WRITE_THREADS"
              value: "1"
            - name: "LOG_LEVEL"
              value: "info"
            - name: KUBECOST_NAMESPACE
              value: kubecost
        - name: cloud-cost
          image: gcr.io/kubecost1/cost-model:prod-2.0.1
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9005
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 200
          imagePullPolicy: Always
          args: ["cloud-cost"]
          ports:
            - name: tcp-api
              containerPort: 9005
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - name: persistent-configs
              mountPath: /var/configs
            - name: federated-storage-config
              mountPath: /var/configs/etl/federated
              readOnly: true
          env:
            - name: CONFIG_PATH
              value: /var/configs/
            - name: FEDERATED_STORE_CONFIG
              value: /var/configs/etl/federated/federated-store.yaml
            - name: FEDERATED_CLUSTER
              value: "true"
            - name: CLOUD_COST_REFRESH_RATE_HOURS
              value: "6"
            - name: CLOUD_COST_QUERY_WINDOW_DAYS
              value: "7"
            - name: CLOUD_COST_RUN_WINDOW_DAYS
              value: "3"
            - name: CLOUD_COST_IS_INCLUDE_LIST
              value: "false"
            - name: CLOUD_COST_LABEL_LIST
              value: ""
            - name: CLOUD_COST_TOP_N
              value: "1000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubecost-diagnostics
  namespace: kubecost
  labels:
    app.kubernetes.io/name: diagnostics
    app.kubernetes.io/instance: kubecost
    app: diagnostics
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: diagnostics
      app.kubernetes.io/instance: kubecost
      app: diagnostics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: diagnostics
        app.kubernetes.io/instance: kubecost
        app: diagnostics
      annotations:
        # Generates a unique annotation upon each `helm upgrade`, forcing a redeployment
        helm.sh/pod-restarter: "277"
    spec:
      restartPolicy: Always
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: kubecost-cost-analyzer
      volumes:
        - name: federated-storage-config
          secret:
            defaultMode: 420
            secretName: kubecost-object-store
        - name: config-db
          emptyDir: {}
      containers:
        - name: diagnostics
          args: ["diagnostics"]
          image: gcr.io/kubecost1/cost-model:prod-2.0.1
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config-db
              mountPath: /var/configs/db
              readOnly: false
            - name: federated-storage-config
              mountPath: /var/configs/etl
              readOnly: true
          env:
            - name: CLUSTER_ID
              value: k8s-infra-prow-build
            - name: FEDERATED_STORE_CONFIG
              value: /var/configs/etl/federated-store.yaml
            - name: DIAGNOSTICS_KUBECOST_FQDN
              value: kubecost-cost-analyzer
            - name: DIAGNOSTICS_KUBECOST_NAMESPACE
              value: kubecost
            - name: DIAGNOSTICS_POLLING_INTERVAL
              value: 300s
            - name: DIAGNOSTICS_PRIMARY
              value: "false"
            - name: DIAGNOSTICS_COLLECT_HELM_VALUES
              value: "false"
            - name: DIAGNOSTICS_KEEP_HISTORY
              value: "false"
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubecost-forecasting
  namespace: kubecost
  labels:
    helm.sh/chart: cost-analyzer-2.0.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: forecasting
    app.kubernetes.io/instance: kubecost
    app: forecasting
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: forecasting
      app.kubernetes.io/instance: kubecost
      app: forecasting
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: forecasting
        app.kubernetes.io/instance: kubecost
        app: forecasting
    spec:
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Always
      containers:
        - name: forecasting
          image: gcr.io/kubecost1/kubecost-modeling:e59c4d9
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          imagePullPolicy: Always
          ports:
            - name: tcp-api
              containerPort: 5000
              protocol: TCP
          resources:
            limits:
              cpu: 1500m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 300Mi
          env:
            - name: CONFIG_PATH
              value: /var/configs/
            - name: KCM_BASE_URL
              value: http://kubecost-cost-analyzer:9090/model
            - name: MODEL_STORAGE_PATH
              value: "/tmp/localrun/models"
            - name: "GUNICORN_CMD_ARGS"
              value: "--log-level info -t 1200"
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 200
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 200
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 500Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "server"
    app: prometheus
    release: kubecost
    heritage: Helm
  name: kubecost-prometheus-server
  namespace: kubecost
spec:
  selector:
    matchLabels:
      component: "server"
      app: prometheus
      release: kubecost
  replicas: 1
  strategy:
    rollingUpdate: null
    type: Recreate
  template:
    metadata:
      labels:
        component: "server"
        app: prometheus
        release: kubecost
        heritage: Helm
    spec:
      serviceAccountName: kubecost-prometheus-server
      containers:
        - name: prometheus-server
          image: "quay.io/prometheus/prometheus:v2.49.1"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            - --query.max-concurrency=1
            - --query.max-samples=1e+08
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: kubecost-prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: kubecost-prometheus-server
---
apiVersion: v1
kind: Pod
metadata:
  name: basic-health
  namespace: kubecost
  annotations:
    helm.sh/hook: test
spec:
  automountServiceAccountToken: false
  restartPolicy: Never
  securityContext:
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  containers:
  - name: test-kubecost
    image: alpine/k8s:1.26.9
    securityContext:
      privileged: false
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    command:
      - /bin/sh
    args:
      - -c
      - >-
        svc="kubecost-cost-analyzer";
        echo Getting current Kubecost state.;
        response=$(curl -sL http://${svc}:9090/model/getConfigs);
        code=$(echo ${response} | jq .code);
        if [ "$code" -eq 200 ]; then
          echo "Got Kubecost working configuration. Successful."
          exit 0
        else
          echo "Failed to fetch Kubecost configuration. Response was $response"
          exit 1
        fi
